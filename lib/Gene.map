{"version":3,"sources":["Gene.js"],"names":["calMap","outputMap","numToHex","num","hex","toString","length","combineColors","hex1","hex2","hexArr","split","hexArr2","r1","parseInt","g1","b1","r2","g2","b2","Gene","constructor","obj","name","decodeURIComponent","e","setting","absolute","id","_id","calTypeText","calType","outputTypeText","outputType","leftGeneValue","Number","rightGeneValue","Object","assign","clone","absoluteValue","keys","getRandomValue","Math","abs","leftGeneValueMax","rightGeneValueMax","random","clearAbsolute","express","resultCache","result","l","r","setTimeout"],"mappings":"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","file":"Gene.map","sourceRoot":"../src/lib","sourcesContent":["import pick from 'lodash/pick';\n\nconst calMap = ['加法', '减法'];\nconst outputMap = ['数字', '颜色'];\n\nfunction numToHex(num) {\n    var hex = num.toString(16);\n    while(hex.length < 6) {\n        hex = '0' + hex;\n    }\n    return hex;\n}\nfunction combineColors (hex1, hex2) {\n    const hexArr = hex1.split('');\n    const hexArr2 = hex2.split('');\n\n    const r1 = parseInt(`0x${hexArr[0]}${hexArr[1]}`);\n    const g1 = parseInt(`0x${hexArr[2]}${hexArr[3]}`);\n    const b1 = parseInt(`0x${hexArr[4]}${hexArr[5]}`);\n\n    const r2 = parseInt(`0x${hexArr2[0]}${hexArr2[1]}`);\n    const g2 = parseInt(`0x${hexArr2[2]}${hexArr2[3]}`);\n    const b2 = parseInt(`0x${hexArr2[4]}${hexArr2[5]}`);\n\n    return ((r1 + r2)/2).toString(16) + ((g1 + g2)/2).toString(16) + ((b1 + b2)/2).toString(16);\n}\n\nexport default class Gene {\n  constructor (obj) {\n    var name;\n    try {\n      name = decodeURIComponent(obj.name);\n    } catch (e) {\n      name = obj.name;\n    }\n\n    this.setting = {\n      absolute: obj.absolute || null,\n      name,\n      id: obj._id,\n      calTypeText: calMap[obj.calType],\n      outputTypeText: outputMap[obj.outputType],\n      leftGeneValue: Number(obj.leftGeneValue),\n      rightGeneValue: Number(obj.rightGeneValue),\n    };\n\n    Object.assign(this, obj, this.setting);\n  }\n  clone (absoluteValue) {\n    return new Gene({\n      absolute: absoluteValue,\n      ...pick(this, Object.keys(this.setting)),\n    });\n  }\n  getRandomValue () {\n    const g1 = Math.abs(this.leftGeneValueMax - this.leftGeneValue);\n    const g2 = Math.abs(this.rightGeneValueMax - this.rightGeneValue);\n\n    return [\n      parseInt(g1 * Math.random() + this.leftGeneValue),\n      parseInt(g2 * Math.random() + this.rightGeneValue)\n    ];\n  }\n  clearAbsolute () {\n    this.absolute = null;\n  }\n  get express () {\n    if (this.absolute !== null) {\n      return this.absolute;\n    }\n    if (this.resultCache && this.resultCache !== 0) {\n      return this.resultCache;\n    }\n    var result = 0;\n    const [l, r] = this.getRandomValue();\n    switch (this.outputType) {\n      case 1:\n        return combineColors(numToHex(l), numToHex(r));\n    }\n\n    switch (this.calType) {\n      case 0:\n        result = l + r;\n        break;\n      case 1:\n        result = l - r;\n        break;\n    }\n    this.resultCache = result;\n    setTimeout(() => {\n      this.resultCache = null;\n    },0);\n    return result;\n  }\n}\n"]}