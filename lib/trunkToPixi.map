{"version":3,"sources":["G.js","trunkToPixi.js"],"names":["normalizeGraphics","G","constructor","initial","type","attrs","genes","getAttrs","attrKeys","Object","keys","map","k","gene","Array","isArray","geneArr","v","i","express","reduce","p","c","assign","output","Polygon","name","pointers","fill","Rect","x","y","w","h","Circle","r","graphicsData","initShowData","d","originData","prop","geneName","filter","gen","_","graphicsList","concat","obj","id","_id","nameText","decodeURIComponent","showData","categoryMap","other","eye","head","horn","category","list","push","values","trunkToPixi","data","graphics","g","PIXI","Graphics","forEach","arr","parseInt","String","replace","beginFill","drawRect","endFill","drawCircle"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QA4EgBA,oBAAAA;AA5ET,MAAMC,CAAN,CAAQ;AACbC,cAAaC,OAAb,EAAsB;AACpB,SAAKC,IAAL,GAAYD,QAAQC,IAAR,IAAgB,EAA5B;AACA,SAAKC,KAAL,GAAaF,QAAQE,KAAR,IAAiB,EAA9B;AACA,SAAKC,KAAL,GAAaH,QAAQG,KAAR,IAAiB,EAA9B;AACD;AACDC,aAAY;AACV,UAAMC,WAAWC,OAAOC,IAAP,CAAY,KAAKL,KAAjB,CAAjB;AACA,WAAOG,SAASG,GAAT,CAAaC,KAAK;AACvB,YAAMC,OAAO,KAAKP,KAAL,CAAWM,CAAX,CAAb;;AAEA,UAAIE,MAAMC,OAAN,CAAc,KAAKV,KAAL,CAAWO,CAAX,CAAd,CAAJ,EAAkC;AAChC,YAAII,UAAUH,QAAQ,EAAtB;AACA,eAAO;AACL,WAACD,CAAD,GAAK,KAAKP,KAAL,CAAWO,CAAX,EAAcD,GAAd,CAAkB,CAACM,CAAD,EAAIC,CAAJ,KAAU;AAC/B,mBAAOF,QAAQE,CAAR,IAAcF,QAAQE,CAAR,EAAWC,OAAX,IAAsB,CAApC,GAAyCF,CAAhD;AACD,WAFI;AADA,SAAP;AAKD;AACD,aAAO;AACL,SAACL,CAAD,GAAKC,OAAOA,KAAKM,OAAL,GAAeN,KAAKM,OAApB,GAA8B,CAArC,GAAyC,KAAKd,KAAL,CAAWO,CAAX;AADzC,OAAP;AAGD,KAdM,EAcJQ,MAdI,CAcG,CAACC,CAAD,EAAIC,CAAJ,KAAUb,OAAOc,MAAP,CAAcF,CAAd,EAAiBC,CAAjB,CAdb,EAckC,EAdlC,CAAP;AAeD;AACDE,WAAU;AACR;AACEpB,YAAM,KAAKA;AADb,OAEK,KAAKG,QAAL,EAFL;AAID;AA7BY;;QAAFN,IAAAA;AAgCN,MAAMwB,OAAN,SAAsBxB,CAAtB,CAAwB;AAC7BC,cAAaC,UAAU,EAAvB,EAA2B;AACzB,UAAMA,OAAN;AACA,SAAKC,IAAL,GAAYqB,QAAQC,IAApB;AACA,QAAI,CAACvB,QAAQE,KAAb,EAAoB;AAClB,WAAKA,KAAL,GAAa;AACXsB,kBAAU,CAAC,EAAD,EAAK,EAAL,EAAS,GAAT,EAAc,EAAd,EAAkB,GAAlB,EAAuB,GAAvB,EAA4B,EAA5B,EAAgC,EAAhC,CADC;AAEXC,cAAM;AAFK,OAAb;AAID;AACF;AAV4B;;QAAlBH,UAAAA;AAaN,MAAMI,IAAN,SAAmB5B,CAAnB,CAAqB;AAC1BC,cAAaC,UAAU,EAAvB,EAA2B;AACzB,UAAMA,OAAN;AACA,SAAKC,IAAL,GAAYyB,KAAKH,IAAjB;AACA,QAAI,CAACvB,QAAQE,KAAb,EAAoB;AAClB,WAAKA,KAAL,GAAa;AACXyB,WAAG,EADQ;AAEXC,WAAG,EAFQ,KChDK+B;ADmDhB9B,WAAG,EAHQ;AAIXC,ACtDR,WDsDW,EAJQ;AAKXL,cAAM;AALK,AChDJ,ODgDT,EChDkBkC,WAAT,CAAqBC,IAArB,EAA2B;ADuDrC,ACtDH,QAAMC,WAAW,GAAGlB,MAAH,CAAUiB,IAAV,EAAgBpD,GAAhB,CAAoB,CAAC,EAACsD,CAAD,EAAD,KAAS;ADuD7C,ACtDC,WAAOA,EAAEtD,GAAF,CAAMsD,KAAK;ADyCM,ACxCtB,cAAOA,EAAE7D,IAAT;AACE,aAAKyB,QAAKH,IAAV;AACE,QDsCGG,OAAAA,ECtCI,IAAIA,OAAJ,CAAS;ADsDnB,ACrDKzB,MDqDC8B,MAAN,MCrDW+B,EAAE7D,CDqDQH,CAArB,CAAuB,CCtDJ;ADuDxBC,ACrDUG,cDqDGF,UAAU,EAAvB,EAA2B,ICpDZ8D,CADL;ADsDR,ACxDsB,UDwDhB9D,CCxDO,CAAP,KDwDN;AACA,ACnDI,SDmDCC,IAAL,ACnDS8B,GDmDGA,OAAOR,ACnDHA,IDmDhB,ACnDI;ADoDJ,ACnDM,QDmDF,CAACvB,QAAQE,ACnDA,IAAI6B,CDmDjB,EAAoB,MCnDP,CAAW;ADoDtB,ACnDM9B,WDmDDC,KAAL,ECnDY4D,CDmDC,CCnDC7D,IADQ;ADqDpB0B,ACnDIzB,WDmDD,GADQ,kBCjDF4D,CADL;ADoDJlC,ACtDoB,WDsDjB,ACtDM,CAAP,EDoDS;AAGXI,AChEF,WDgEK,EAHQ;AAIXP,ACjDH,KAjBM,CAAP,QDkEU;AAJK,AC5ChB,GAnBgB,CAAjB,GD+DI;AAMD,ACjDH,QAAMqC,IAAI,IAAIC,KAAKC,QAAT,EAAV;ADkDC,ACjDDH,WAASI,OAAT,CAAiBC,OAAO;ADqCI,ACpC1BA,QAAID,OAAJ,CAAYrB,OAAO;AAAA,0BACJA,IAAIxC,QAAJ,EADI;QDoCV2B,SAAAA;AAeN,ACnDgB,SDmDPlC,CClDL4B,IADY,YDmDhB,CAA4BQ,IClDxBR,IADY,IDmDhB,EAA0CtB,KAA1C,EAAiD;;AAEtD,ACnDIsB,WDmDKS,ECnDEiC,SAASC,CDmDpB,CAAuBjC,CAAvB,EAA0B,ECnDCV,IAAP,EAAa4C,OAAb,CAAqB,GAArB,EAA0B,IAA1B,CAAT,CAAP;ADoDF,ACnDEP,QAAEQ,GDmDGnC,EAAE3B,GAAF,CAAM4B,ACnDX,CAAYX,IAAZ,EAAkB,CAAlB,MDmDyB;AACzBW,ACnDA,cAAQQ,IAAI7C,WAAZ,GDoDKqC,UADL;AAEEjC,ACpDA,aAAKuB,EDoDEpB,KCpDP,EDoDcC,IAAP,CAAY6B,WAAWjC,KAAvB,EAA8BK,GAA9B,CAAkC6B,QAAQ;AAC/C,ACpDA,WAAC,KDoDKC,CCpDC,UDoDUF,WAAWjC,KAAX,CAAiBkC,IAAjB,CAAjB;ACpDO,iCACWO,IAAIxC,QAAJ,EADX;ADsDP,cAAI,CAACkC,QAAL,EAAe;AACb,ACvDK,gBACAX,CADA,EDuDE,EAAP,cCtDKA,CADA;ADwDN,ACxDM,gBACEC,CADF,kBACEA,CADF;ADyDP,ACzDO,gBACIC,CDwDJ,ACzDA,kBACIA,CADJ;AD0DL,AC1DK,aD0DJQ,GCzDUP,CDyDX,AC1DK,GD0DG3B,MAAMoC,MAAN,CAAaC,ECzDVV,CADN,ID0DuBU,IAAIjB,IAAJ,KAAac,IAAjC,EAAuC,CAAvC;AADH,WAAP;AAGD,AC1DGyB,SDiDG,EASJ7C,GC1DGsD,GDiDC,CASG,CAACrD,CAAD,EAAIC,AC1DV,CD0DM,AC1DKQ,CAAX,EAAaC,CAAb,CD0DgBtB,CC1DDuB,CAAf,EAAiBC,CAAjB,ED0DuBV,MAAP,CAAcF,CAAd,EAAiBC,CAAjB,CATb,EASkC,EATlC;AAFT,AC9CM2C,cAAEU,OAAF;AACD,WAJD;AD+DJ,AC1DI,cD0DIpC,WAAWnC,IAAnB;AACE,AC1DA,aD0DKyB,AC1DAK,KD0DKR,IAAV,AC1DA;AD2DE,AC1DA,WAAC,MD0DM,AC1DA,ID0DIG,IAAJ,CAASU,UAAT,CAAP;AACF,AC3DS,aD2DJL,OAAOR,IAAZ,SC1DkBqB,IAAIxC,QAAJ,EADT;AD4DP,iBAAO,IAAI2B,MAAJ,CAAWK,UAAX,CAAP;AACF,AC7DS,aD6DJd,GC5DIK,CADA,ID6DIJ,IAAb,UC5DSI,CADA;AD8DP,AC9DO,gBACEC,CD6DF,AC9DA,ID8DIN,OAAJ,CAAYc,MC7DVR,CADF,GD8DA,CAAP;AANJ,ACxDW,gBACII,CADJ,kBACIA,CADJ;ADgEZ,KAvBM,EAuBJO,MAvBI,CAuBGE,KAAKA,CAvBR,CAAP;AAwBD,AC/DSqB,cAAEW,UAAF,CAAa9C,CAAb,EAAeC,CAAf,EAAiBI,CAAjB;AACA8B,cAAEU,OAAF;ADgEV,AC/DS,QD+DH9B,GCnEE,YDmEa,GAAGC,MAAH,CAAUV,YAAV,EAAwBzB,GAAxB,CAA4BoC,oBAC5CA,GAD4C;AAE/CC,AChEM,QDgEFD,IAAIE,GAFuC;AAG/CC,AChEI,cDgEMC,mBAAmBJ,IAAIrB,IAAvB,CAHqC;AAI/C0B,AChFE,cDgFQf,aAAaU,IAAIK,QAAJ,IAAgB,EAA7B;AAJqC,AC3D9C,ID2DkB,CAArB,AChFE;AAsBD,GAvBD;ADyFA,ACjEA,MDiEIjB,GCjEG8B,CDiEC,ACjER,EDiEA;AACA,ACjED,QDiEOZ,cAAc;AAClBC,WAAO,IADW;AAElBC,SAAK,GAFa;AAGlBC,UAAM,GAHY;AAIlBC,UAAM;AAJY,GAApB;AAMAZ,eAAalC,GAAb,CAAiBoC,OAAO;AACtB,QAAIW,WAAWX,IAAIW,QAAnB;AACA,QAAI,CAACA,QAAL,EAAe;AACbA,iBAAW,OAAX;AACD;AACD,QAAI,CAACL,YAAYK,QAAZ,CAAL,EAA4B;AAC1B;AACD;AACD,QAAI,CAACvB,EAAEuB,QAAF,CAAL,EAAkB;AAChBvB,QAAEuB,QAAF,IAAc;AACZA,gBADY;AAEZhC,cAAM2B,YAAYK,QAAZ,KAAyB,OAFnB;AAGZb,sBAAc;AAHF,OAAd;AAKD;AACD,QAAIc,OAAOxB,EAAEuB,QAAF,CAAX;AACAC,SAAKd,YAAL,CAAkBe,IAAlB,CAAuBb,GAAvB;AACD,GAjBD;AAkBAZ,MAAI1B,OAAOoD,MAAP,CAAc1B,CAAd,CAAJ;;AAEA,SAAOA,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"trunkToPixi.map","sourceRoot":"../src/lib","sourcesContent":["export class G {\n  constructor (initial) {\n    this.type = initial.type || '';\n    this.attrs = initial.attrs || {};\n    this.genes = initial.genes || {};\n  }\n  getAttrs () {\n    const attrKeys = Object.keys(this.attrs);\n    return attrKeys.map(k => {\n      const gene = this.genes[k];\n\n      if (Array.isArray(this.attrs[k])) {\n        let geneArr = gene || [];\n        return {\n          [k]: this.attrs[k].map((v, i) => {\n            return geneArr[i] ? (geneArr[i].express || 0) : v;\n          }),\n        };\n      }\n      return {\n        [k]: gene ? gene.express ? gene.express : 0 : this.attrs[k],\n      }\n    }).reduce((p, c) => Object.assign(p, c), {});\n  }\n  output () {\n    return {\n      type: this.type,\n      ...this.getAttrs(),\n    }\n  }\n}\n\nexport class Polygon extends G {\n  constructor (initial = {}) {\n    super(initial);\n    this.type = Polygon.name;\n    if (!initial.attrs) {\n      this.attrs = {\n        pointers: [20, 20, 100, 20, 100, 100, 20, 20],\n        fill: '#000000',\n      }\n    }\n  }\n}\n\nexport class Rect extends G {\n  constructor (initial = {}) {\n    super(initial);\n    this.type = Rect.name;\n    if (!initial.attrs) {\n      this.attrs = {\n        x: 20,\n        y: 20,\n        w: 80,\n        h: 50,\n        fill: '#000000',\n      };\n    }\n  }\n}\n\nexport class Circle extends G {\n  constructor (initial = {}) {\n    super(initial);\n    this.type = Circle.name;\n    if (!initial.attrs) {\n      this.attrs = {\n        x: 100,\n        y: 100,\n        r: 30,\n        fill: '#000000',\n      };\n    }\n  }\n}\n\nexport function normalizeGraphics (graphicsData, genes) {\n\n  function initShowData (d) {\n    return d.map(originData => {\n      originData = {\n        ...originData,\n        genes: Object.keys(originData.genes).map(prop => {\n          const geneName = originData.genes[prop]\n\n          if (!geneName) {\n            return {};\n          }\n          return {\n            [prop]: genes.filter(gen => gen.name === prop)[0],\n          }\n        }).reduce((p, c) => Object.assign(p, c), {}),\n      }\n\n      switch (originData.type) {\n        case Rect.name:\n          return new Rect(originData);\n        case Circle.name:\n          return new Circle(originData);\n        case Polygon.name:\n          return new Polygon(originData);\n      }\n    }).filter(_ => _);\n  }\n\n  const graphicsList = [].concat(graphicsData).map(obj => ({\n    ...obj,\n    id: obj._id,\n    nameText: decodeURIComponent(obj.name),\n    showData: initShowData(obj.showData || []),\n  }));\n\n\n  var r = {};\n  const categoryMap = {\n    other: '其它',\n    eye: '眼',\n    head: '头',\n    horn: '角',\n  };\n  graphicsList.map(obj => {\n    var category = obj.category;\n    if (!category) {\n      category = 'other';\n    }\n    if (!categoryMap[category]) {\n      // throw new Error(`${category} not found map`);\n    }\n    if (!r[category]) {\n      r[category] = {\n        category,\n        name: categoryMap[category] || 'other',\n        graphicsList: [],\n      }\n    }\n    var list = r[category];\n    list.graphicsList.push(obj);\n  });\n  r = Object.values(r);\n\n  return r;\n}\n//\n// module.exports = {\n//   normalizeGraphics,\n//   G,\n//   Polygon,\n//   Rect,\n//   Circle,\n// };\n","import {Circle, Rect} from './G';\n\nexport default function trunkToPixi(data) {\n  const graphics = [].concat(data).map(({g}) => {\n    return g.map(g => {\n      switch(g.type) {\n        case Rect.name:\n          return new Rect({\n            type: g.type,\n            attrs: {\n              ...g,\n            },\n          });\n        case Circle.name:\n          return new Circle({\n            type: g.type,\n            attrs: {\n              ...g,\n            },\n          });\n      }\n    });\n  });\n  const g = new PIXI.Graphics();\n  graphics.forEach(arr => {\n    arr.forEach(obj => {\n      let {fill} = obj.getAttrs();\n      fill = parseInt(String(fill).replace('#', '0x'));\n      g.beginFill(fill, 1);\n      switch (obj.constructor) {\n        case Rect:\n          (() => {\n            let {x,y,w,h} = obj.getAttrs();\n            g.drawRect(x,y,w,h);\n            g.endFill();\n          })();\n          break;\n        case Circle:\n          (() => {\n            let {x,y,r} = obj.getAttrs();\n            g.drawCircle(x,y,r);\n            g.endFill();\n          })();\n          break;\n        default:\n      }\n    })\n  });\n  return g;\n}\n"]}