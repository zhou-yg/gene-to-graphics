{"version":3,"sources":["G.js","trunkToPixi.js"],"names":["categoryGraphics","normalizeGraphics","G","constructor","initial","type","attrs","genes","getAttrs","attrKeys","Object","keys","map","k","gene","Array","isArray","geneArr","v","i","express","reduce","p","c","assign","output","Polygon","name","pointers","fill","Rect","x","y","w","h","Circle","r","graphicsList","categoryMap","other","eye","head","horn","obj","category","list","push","values","graphicsData","initShowData","d","originData","prop","geneName","filter","gen","_","concat","id","_id","nameText","decodeURIComponent","showData","trunkToPixi","data","graphics","g","PIXI","Graphics","forEach","arr","parseInt","String","replace","beginFill","drawRect","endFill","drawCircle"],"mappings":"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","file":"trunkToPixi.map","sourceRoot":"../src/lib","sourcesContent":["export class G {\n  constructor (initial) {\n    this.type = initial.type || '';\n    this.attrs = initial.attrs || {};\n    this.genes = initial.genes || {};\n  }\n  getAttrs () {\n    const attrKeys = Object.keys(this.attrs);\n    return attrKeys.map(k => {\n      const gene = this.genes[k];\n\n      if (Array.isArray(this.attrs[k])) {\n        let geneArr = gene || [];\n        return {\n          [k]: this.attrs[k].map((v, i) => {\n            return geneArr[i] ? (geneArr[i].express || 0) : v;\n          }),\n        };\n      }\n      return {\n        [k]: gene ? gene.express ? gene.express : 0 : this.attrs[k],\n      }\n    }).reduce((p, c) => Object.assign(p, c), {});\n  }\n  output () {\n    return {\n      type: this.type,\n      ...this.getAttrs(),\n    }\n  }\n}\n\nexport class Polygon extends G {\n  constructor (initial = {}) {\n    super(initial);\n    this.type = Polygon.name;\n    if (!initial.attrs) {\n      this.attrs = {\n        pointers: [20, 20, 100, 20, 100, 100, 20, 20],\n        fill: '#000000',\n      }\n    }\n  }\n}\n\nexport class Rect extends G {\n  constructor (initial = {}) {\n    super(initial);\n    this.type = Rect.name;\n    if (!initial.attrs) {\n      this.attrs = {\n        x: 20,\n        y: 20,\n        w: 80,\n        h: 50,\n        fill: '#000000',\n      };\n    }\n  }\n}\n\nexport class Circle extends G {\n  constructor (initial = {}) {\n    super(initial);\n    this.type = Circle.name;\n    if (!initial.attrs) {\n      this.attrs = {\n        x: 100,\n        y: 100,\n        r: 30,\n        fill: '#000000',\n      };\n    }\n  }\n}\n\nexport function categoryGraphics (graphicsList) {\n  var r = {};\n  const categoryMap = {\n    other: '其它',\n    eye: '眼',\n    head: '头',\n    horn: '角',\n  };\n  graphicsList.map(obj => {\n    var category = obj.category;\n    if (!category) {\n      category = 'other';\n    }\n    if (!categoryMap[category]) {\n      // throw new Error(`${category} not found map`);\n    }\n    if (!r[category]) {\n      r[category] = {\n        category,\n        name: categoryMap[category] || 'other',\n        graphicsList: [],\n      }\n    }\n    var list = r[category];\n    list.graphicsList.push(obj);\n  });\n  r = Object.values(r);\n\n  return r;\n}\nexport function normalizeGraphics (graphicsData, genes) {\n\n\n  function initShowData (d) {\n    return d.map(originData => {\n      originData = {\n        ...originData,\n        genes: Object.keys(originData.genes).map(prop => {\n          const geneName = originData.genes[prop]\n\n          if (!geneName) {\n            return {};\n          }\n          return {\n            [prop]: genes.filter(gen => gen.name === prop)[0],\n          }\n        }).reduce((p, c) => Object.assign(p, c), {}),\n      }\n\n      switch (originData.type) {\n        case Rect.name:\n          return new Rect(originData);\n        case Circle.name:\n          return new Circle(originData);\n        case Polygon.name:\n          return new Polygon(originData);\n      }\n    }).filter(_ => _);\n  }\n\n  const graphicsList = [].concat(graphicsData).map(obj => ({\n    ...obj,\n    id: obj._id,\n    nameText: decodeURIComponent(obj.name),\n    showData: initShowData(obj.showData || []),\n  }));\n\n  return graphicsList;\n}\n//\n// module.exports = {\n//   normalizeGraphics,\n//   G,\n//   Polygon,\n//   Rect,\n//   Circle,\n// };\n","import {Circle, Rect} from './G';\n\nexport default function trunkToPixi(data) {\n  const graphics = [].concat(data).map(({g}) => {\n    return g.map(g => {\n      switch(g.type) {\n        case Rect.name:\n          return new Rect({\n            type: g.type,\n            attrs: {\n              ...g,\n            },\n          });\n        case Circle.name:\n          return new Circle({\n            type: g.type,\n            attrs: {\n              ...g,\n            },\n          });\n      }\n    });\n  });\n  const g = new PIXI.Graphics();\n  graphics.forEach(arr => {\n    arr.forEach(obj => {\n      let {fill} = obj.getAttrs();\n      fill = parseInt(String(fill).replace('#', '0x'));\n      g.beginFill(fill, 1);\n      switch (obj.constructor) {\n        case Rect:\n          (() => {\n            let {x,y,w,h} = obj.getAttrs();\n            g.drawRect(x,y,w,h);\n            g.endFill();\n          })();\n          break;\n        case Circle:\n          (() => {\n            let {x,y,r} = obj.getAttrs();\n            g.drawCircle(x,y,r);\n            g.endFill();\n          })();\n          break;\n        default:\n      }\n    })\n  });\n  return g;\n}\n"]}